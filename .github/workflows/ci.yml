---

name: OpenWISP Controller CI Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Python==${{ matrix.python-version }} | ${{ matrix.django-version }}
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        django-version:
          - django~=4.2.0
          - django~=5.1.0
          - django~=5.2.0
        exclude:
          # Django 5.1+ requires Python >=3.10
          - python-version: "3.9"
            django-version: django~=5.1.0
          - python-version: "3.9"
            django-version: django~=5.2.0
          # Python 3.13 supported only in Django >=5.1.3
          - python-version: "3.13"
            django-version: django~=4.2.0

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Disable man page auto-update
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
        sudo dpkg-reconfigure man-db

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          **/requirements*.txt

    - name: Install Dependencies
      id: deps
      run: |
        sudo apt update
        sudo apt -qq -y install sqlite3 gdal-bin libproj-dev \
          libgeos-dev libspatialite-dev spatialite-bin \
          libsqlite3-mod-spatialite
        sudo npm install -g prettier
        pip install -U pip wheel setuptools
        pip install -U -r requirements-test.txt
        pip install -U -e .
        pip install ${{ matrix.django-version }}

    - name: Start postgres and redis
      if: ${{ !cancelled() && steps.deps.conclusion == 'success' }}
      run: docker compose up -d postgres redis

    - name: QA checks
      run: ./run-qa-checks

    - name: Tests
      if: ${{ !cancelled() && steps.deps.conclusion == 'success' }}
      run: |
        coverage run runtests.py --parallel
        # tests the extension capability
        SAMPLE_APP=1 coverage run ./runtests.py --parallel --keepdb --exclude-tag=selenium_tests
        coverage combine
        coverage xml
      env:
        SELENIUM_HEADLESS: 1
        GECKO_LOG: 1

    - name: Show gecko web driver log on failures
      if: ${{ failure() }}
      run: cat geckodriver.log

    - name: Upload Coverage
      if: ${{ success() }}
      uses: coverallsapp/github-action@v2
      with:
        parallel: true
        format: cobertura
        flag-name: python-${{ matrix.env.env }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

  coveralls:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
